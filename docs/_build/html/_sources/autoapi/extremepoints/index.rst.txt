extremepoints
=============

.. py:module:: extremepoints


Functions
---------

.. autoapisummary::

   extremepoints.extremepoints_method


Module Contents
---------------

.. py:function:: extremepoints_method(x: numpy.ndarray, f: Callable, results: pyuncertainnumber.propagation.utils.Propagation_results = None, save_raw_data='no') -> pyuncertainnumber.propagation.utils.Propagation_results

       Performs uncertainty propagation using the Extreme Point Method for monotonic functions.
       This method estimates the bounds of a function's output by evaluating it at specific combinations of extreme values
       (lower or upper bounds) of the input variables. It is efficient for monotonic functions but might not be accurate for non-monotonic functions.
       If the `f` function returns multiple outputs, the `bounds` array will be 2-dimensional.

   :param - x: A 2D NumPy array where each row represents an input variable and
               the two columns define its lower and upper bounds (interval).
   :param - f: A callable function that takes a 1D NumPy array of input values and
               returns the corresponding output(s).
   :param - save_raw_data: Controls the amount of data returned.
                           - 'no': Returns only the minimum and maximum output values along with the
                                   corresponding input values.
                           - 'yes': Returns the above, plus the full arrays of unique input combinations
                                   (`all_input`) and their corresponding output values (`all_output`).

   signature:
       extremepoints_method(x:np.ndarray, f:Callable, results:dict, save_raw_data = 'no') -> dict


   :returns:

             - A Propagation_results object containing the results.
               - 'bounds': An np.ndarray of the bounds for each output parameter (if f is not None).
               - 'sign_x': A NumPy array of shape (num_outputs, d) containing the signs (i.e., positive, negative)
                         used to determine the extreme points for each output.
               - 'min': A dictionary for lower bound results (if f is not None):
                 - 'x': Input values that produced the minimum output value(s).
                 - 'f': Minimum output value(s).
               - 'max': A dictionary for upper bound results (if f is not None):
                 - 'x': Input values that produced the maximum output value(s).
                 - 'f': Maximum output value(s).
               - 'raw_data': A dictionary containing raw data (if `save_raw_data` is 'yes'):
                 - 'x': All generated input samples.
                 - 'f': Corresponding output values for each input sample.

   .. rubric:: Example

   # Example usage with different parameters for minimization and maximization
   >>> f = lambda x: x[0] + x[1] + x[2]  # Example function
   >>> # Determine input parameters for function and method
   >>> x_bounds = np.array([[1, 2], [3, 4], [5, 6]])
   >>> # Call the method
   >>> y = extremepoint_method(x_bounds, f)
   >>> # print results
   >>> y.print()


