second_order_propagation
========================

.. py:module:: second_order_propagation


Functions
---------

.. autoapisummary::

   second_order_propagation.second_order_propagation_method


Module Contents
---------------

.. py:function:: second_order_propagation_method(x: list, f: Callable = None, results: pyuncertainnumber.propagation.utils.Propagation_results = None, method='endpoints', n_disc: Union[int, numpy.ndarray] = 10, condensation: Union[float, numpy.ndarray] = None, tOp: Union[float, numpy.ndarray] = 0.999, bOt: Union[float, numpy.ndarray] = 0.001, save_raw_data='no') -> pyuncertainnumber.propagation.utils.Propagation_results

   :param - x: A list of `UncertainNumber` objects representing the uncertain inputs.
   :type - x: list
   :param - f: The function to evaluate.
   :type - f: Callable
   :param - results: An object to store propagation results.
                     Defaults to None, in which case a new
                     `Propagation_results` object is created.
   :type - results: Propagation_results, optional
   :param - method: The method used to estimate the bounds of each combination
                    of focal elements. Can be either 'endpoints' or 'extremepoints'.
                    Defaults to 'endpoints'.
   :type - method: str, optional
   :param - n_disc: The number of discretization points
                    for each uncertain input. If an integer is provided,
                    it is used for all inputs. If a NumPy array is provided,
                    each element specifies the number of discretization
                    points for the corresponding input.
                    Defaults to 10.
   :type - n_disc: Union[int, np.ndarray], optional
   :param - condensation: A parameter or array of parameters
                          to control the condensation of the output p-boxes.
                          Defaults to None.
   :type - condensation: Union[float, np.ndarray], optional
   :param - tOp: Upper threshold or array of thresholds for
                 discretization.
                 Defaults to 0.999.
   :type - tOp: Union[float, np.ndarray], optional
   :param - bOt: Lower threshold or array of thresholds for
                 discretization.
                 Defaults to 0.001.
   :type - bOt: Union[float, np.ndarray], optional
   :param - save_raw_data: Whether to save raw data ('yes' or 'no').
                           Defaults to 'no'.
   :type - save_raw_data: str, optional

   signature:
       second_order_propagation_method(x: list, f: Callable, results: Propagation_results = None, ...) -> Propagation_results

   .. rubric:: Notes

   - Performs second-order uncertainty propagation for mixed uncertain numbers.
   - The function handles different types of uncertain numbers (distributions, intervals,
     p-boxes) and discretizes them accordingly.
   - It generates combinations of focal elements from the discretized uncertain inputs.
   - For the 'endpoints' method, it evaluates the function at all combinations of endpoints
     of the focal elements.
   - For the 'extremepoints' method, it uses the `extremepoints_method` to determine the
     signs of the partial derivatives and evaluates the function at the extreme points.
   - The output p-boxes are constructed by considering the minimum and maximum values obtained
     from the function evaluations.
   - The `condensation` parameter can be used to reduce the number of intervals in the output
     p-boxes.

   :returns:

             A `Propagation_results` object containing:
                 - raw_data (dict): Dictionary containing raw data shared across output(s):
                         - x (np.ndarray): Input values.
                         - f (np.ndarray): Output values.
                         - min (np.ndarray): Array of dictionaries, one for each output,
                                   containing 'f' for the minimum of that output.
                         - max (np.ndarray): Array of dictionaries, one for each output,
                                   containing 'f' for the maximum of that output.
                         - bounds (np.ndarray): 2D array of lower and upper bounds for each output.
   :rtype: Propagation_results

   .. rubric:: Example

   from pyuncertainnumber import UncertainNumber

   def Fun(x):

       input1= x[0]
       input2=x[1]
       input3=x[2]
       input4=x[3]
       input5=x[4]

       output1 = input1 + input2 + input3 + input4 + input5
       output2 = input1 * input2 * input3 * input4 * input5

       return np.array([output1, output2])

   means = np.array([1, 2, 3, 4, 5])
   stds = np.array([0.1, 0.2, 0.3, 0.4, 0.5])

   x = [
       UncertainNumber(essence = 'distribution', distribution_parameters= ["gaussian",[means[0], stds[0]]]),

       UncertainNumber(essence = 'interval', bounds= [means[1]-2* stds[1], means[1]+2* stds[1]]),
       UncertainNumber(essence = 'interval', bounds= [means[2]-2* stds[2], means[2]+2* stds[2]]),
       UncertainNumber(essence = 'interval', bounds= [means[3]-2* stds[3], means[3]+2* stds[3]]),
       UncertainNumber(essence = 'interval', bounds= [means[4]-2* stds[4], means[4]+2* stds[4]])
       ]

   results = second_order_propagation_method(x=x, f=Fun, method = 'endpoints', n_disc= 5)


