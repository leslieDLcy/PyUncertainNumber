sampling
========

.. py:module:: sampling


Functions
---------

.. autoapisummary::

   sampling.index_to_bool_
   sampling.sampling_method


Module Contents
---------------

.. py:function:: index_to_bool_(index: numpy.ndarray, dim=2)

   Converts a vector of indices to an array of boolean pairs for masking.

   :param index: A NumPy array of integer indices representing selected elements or categories.
                 The values in `index` should be in the range [0, dim-1].
   :param dim: The number of categories or dimensions in the output boolean array. Defaults to 2.
   :type dim: scalar

   signature:
     index_to_bool_(index:np.ndarray,dim=2) -> tuple

   .. note::

      - the augument `index` is an np.ndaray of the index of intervals.
      - the argument `dim` will specify the function mapping of variables to be propagated.
      - If dim > 2,  e.g. (2,0,1,0) the array of booleans is [(0,0,1),(1,0,0),(0,1,0),(1,0,0)].

   :returns:

             - A NumPy array of boolean pairs representing the mask.


.. py:function:: sampling_method(x: numpy.ndarray, f: Callable, results: pyuncertainnumber.propagation.utils.Propagation_results = None, n_sam: int = 500, method='monte_carlo', save_raw_data='no', endpoints=False) -> pyuncertainnumber.propagation.utils.Propagation_results

   sampling of intervals

   :param x: A 2D NumPy array where each row represents an input variable and
             the two columns define its lower and upper bounds (interval).
   :type x: np.ndarray
   :param f: A callable function that takes a 1D NumPy array of input values and returns the
             corresponding output(s). Can be None, in which case only samples are generated.
   :type f: Callable
   :param n_sam: The number of samples to generate for the chosen sampling method.
   :type n_sam: int
   :param method:
                  The sampling method to use. Choose from:
                   - 'monte_carlo': Monte Carlo sampling (random sampling from uniform distributions)
                   - 'latin_hypercube': Latin Hypercube sampling (stratified sampling for better space coverage)
                  Defaults to 'monte_carlo'.
   :type method: str, optional
   :param endpoints: If True, include the interval endpoints in the sampling.
                     Defaults to False.
   :type endpoints: bool, optional
   :param save_raw_data: Whether to save raw data. Options: 'yes', 'no'.
                         Defaults to 'no'.
   :type save_raw_data: str, optional

   signature:
       sampling_method(x:np.ndarray, f:Callable, n_sam:int, method ='montecarlo', endpoints=False, results:dict = None, save_raw_data = 'no') -> dict of np.ndarrays

   .. note::

      - The function assumes that the na in `x` represent uniform distributions.
      - If the `f` function returns multiple outputs, the `all_output` array will be 2-dimensional y and x for all x samples.

   :returns:

             A dictionary containing the results:
                 - 'bounds': An np.ndarray of the bounds for each output parameter (if f is not None).
                 - 'min': A dictionary for lower bound results (if f in not None)
                     - 'x': Input values that produced the miminum output value(s) (if f is not None).
                     - 'f': Minimum output value(s) (if f is not None).
                 - 'max':  A dictionary for upper bound results (if f in not None)
                     - 'x': Input values that produced the maximum output value(s) (if f is not None).
                     - 'f': Maximum output value(s) (if f is not None).
                 - 'raw_data': A dictionary containing raw data (if save_raw_data is 'yes'):
                     - 'x': All generated input samples.
                     - 'f': Corresponding output values for each input sample.
   :rtype: dict

   .. rubric:: Example

   >>> x = np.array([[1, 2], [3, 4], [5, 6]])  # Define input intervals
   >>> f = lambda x: x[0] + x[1] + x[2]  # Define the function
   >>> y = sampling_method(x, f, n_sam=500, method='monte_carlo', endpoints=False, save_raw_data='no')


