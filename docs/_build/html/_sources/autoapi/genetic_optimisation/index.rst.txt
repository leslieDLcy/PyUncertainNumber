genetic_optimisation
====================

.. py:module:: genetic_optimisation


Functions
---------

.. autoapisummary::

   genetic_optimisation.a
   genetic_optimisation.genetic_optimisation_method


Module Contents
---------------

.. py:function:: a(x)

.. py:function:: genetic_optimisation_method(x_bounds: numpy.ndarray, f: Callable, results: pyuncertainnumber.propagation.utils.Propagation_results = None, pop_size=1000, n_gen=100, tol=0.001, n_gen_last=10, algorithm_type='NSGA2') -> pyuncertainnumber.propagation.utils.Propagation_results

   Performs both minimisation and maximisation using a genetic algorithm.

   :param x_bounds: Bounds for decision variables (NumPy array).
   :param f: Objective function to optimize.
   :param pop_size: Population size (int or array of shape (2,)).
   :param n_gen: Maximum number of generations (int or array of shape (2,)).
   :param tol: Tolerance for convergence check (float or array of shape (2,)).
   :param n_gen_last: Number of last generations to consider for convergence
                      (int or array of shape (2,)).
   :param algorithm_type: 'NSGA2' or 'GA' to select the optimisation algorithm
                          (str or array of shape (2,)).

   signature:
       genetic_optimisation_method(x_bounds: np.ndarray, f: Callable, results:dict,
                                   pop_size=1000, n_gen=100, tol=1e-3,
                                   n_gen_last=10, algorithm_type="NSGA2") -> dict


   :returns:

             A dictionary containing the optimisation results:
                 - 'bounds': An np.ndarray of the bounds for the output parameter (if f is not None).
                 - 'min': A dictionary with keys 'x', 'f', 'n_gen', and 'n_iter' for minimisation results.
                 - 'max': A dictionary with keys 'x', 'f', 'n_gen', and 'n_iter' for maximisation results.
   :rtype: dict

   .. rubric:: Example

   >>> # Example usage with different parameters for minimisation and maximisation
   >>> f = lambda x: x[0] + x[1] + x[2] # Example function
   >>> x_bounds = np.array([[1, 2], [3, 4], [5, 6]])
   >>> # Different population sizes for min and max
   >>> pop_size = np.array([500, 1500])
   >>> # Different number of generations
   >>> n_gen = np.array([50, 150])
   >>> # Different tolerances
   >>> tol = np.array([1e-2, 1e-4])
   >>> # Different algorithms
   >>> algorithm_type = np.array(["GA", "NSGA2"])
   >>> y = genetic_optimisation_method(x_bounds, f, pop_size=pop_size, n_gen=n_gen,
   >>>                                 tol=tol, n_gen_last=10, algorithm_type=algorithm_type)
   >>> # Print the results
   >>> y.print()


