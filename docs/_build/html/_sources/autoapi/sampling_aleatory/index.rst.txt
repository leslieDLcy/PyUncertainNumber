sampling_aleatory
=================

.. py:module:: sampling_aleatory


Functions
---------

.. autoapisummary::

   sampling_aleatory.sampling_aleatory_method


Module Contents
---------------

.. py:function:: sampling_aleatory_method(x: list, f: Callable, results: pyuncertainnumber.propagation.utils.Propagation_results = None, n_sam: int = 500, method='monte_carlo', save_raw_data='no') -> pyuncertainnumber.propagation.utils.Propagation_results

   Performs uncertainty propagation using Monte Carlo or Latin Hypercube sampling,  similar to the `sampling_method`.


   :param - x: A list of `UncertainNumber` objects, each representing an input
               variable with its associated uncertainty.
   :type - x: list
   :param - f: A callable function that takes a 1D NumPy array of input
               values and returns the corresponding output(s). Can be None,
               in which case only samples are generated.
   :type - f: Callable
   :param - results: An object to store propagation results.
                     Defaults to None, in which case a new
                     `Propagation_results` object is created.
   :type - results: Propagation_results, optional
   :param - n_sam: The number of samples to generate for the chosen sampling method.
                   Defaults to 500.
   :type - n_sam: int
   :param - method: The sampling method to use. Choose from:
                    - 'monte_carlo': Monte Carlo sampling (random sampling
                                      from the distributions specified in
                                      the UncertainNumber objects)
                    - 'latin_hypercube': Latin Hypercube sampling (stratified
                                          sampling for better space coverage)
                    Defaults to 'monte_carlo'.
   :type - method: str, optional
   :param - save_raw_data: Whether to save raw data. Options: 'yes', 'no'.
                           Defaults to 'no'.
   :type - save_raw_data: str, optional

   signature:
       sampling_aleatory_method(x: list, f: Callable, results: Propagation_results = None, ...) -> Propagation_results

   .. note:: - If the `f` function returns multiple outputs, the code can accomodate.

   :returns:

             A `Propagation_results` object containing:
                               - 'raw_data': A dictionary containing raw data (if
                                             `save_raw_data` is 'yes'):
                                               - 'x': All generated input samples.
                                               - 'f': Corresponding output values for
                                                     each input sample (if `f` is
                                                     provided).
   :rtype: - Propagation_results

   :raises - ValueError: If an invalid sampling method or `save_raw_data` option is provided.

   .. rubric:: Example

   >>> results = sampling_aleatory_method(x=x, f=Fun, n_sam = 300, method = 'monte_carlo', save_raw_data = "no")


