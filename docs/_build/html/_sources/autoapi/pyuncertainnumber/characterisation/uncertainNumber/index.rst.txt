pyuncertainnumber.characterisation.uncertainNumber
==================================================

.. py:module:: pyuncertainnumber.characterisation.uncertainNumber


Classes
-------

.. autoapisummary::

   pyuncertainnumber.characterisation.uncertainNumber.UncertainNumber


Functions
---------

.. autoapisummary::

   pyuncertainnumber.characterisation.uncertainNumber.makeUNPbox
   pyuncertainnumber.characterisation.uncertainNumber.I
   pyuncertainnumber.characterisation.uncertainNumber.norm
   pyuncertainnumber.characterisation.uncertainNumber.expon
   pyuncertainnumber.characterisation.uncertainNumber.gamma
   pyuncertainnumber.characterisation.uncertainNumber._parse_interverl_inputs


Module Contents
---------------

.. py:class:: UncertainNumber

   Uncertain Number class

   :param - `bounds`;:
   :param - `distribution_parameters`: a list of the distribution family and its parameters; e.g. ['norm', [0, 1]];
   :param - `pbox_initialisation`: a list of the distribution family and its parameters; e.g. ['norm', ([0,1], [3,4])];
   :param -  naked_value: the deterministic numeric representation of the UN object, which shall be linked with the 'pba' or `Intervals` package

   .. rubric:: Example

   >>> UncertainNumber(name="velocity", symbol="v", units="m/s", bounds=[1, 2])


   .. py:attribute:: name
      :type:  str
      :value: None



   .. py:attribute:: symbol
      :type:  str
      :value: None



   .. py:attribute:: units
      :type:  Type[any]
      :value: None



   .. py:attribute:: _Q
      :type:  Type[any]
      :value: None



   .. py:attribute:: uncertainty_type
      :type:  Type[pyuncertainnumber.characterisation.uncertainty_types.Uncertainty_types]
      :value: None



   .. py:attribute:: essence
      :type:  str
      :value: None



   .. py:attribute:: masses
      :type:  list[float]
      :value: None



   .. py:attribute:: bounds
      :type:  Union[List[float], str]
      :value: None



   .. py:attribute:: distribution_parameters
      :type:  list[str, float | int]
      :value: None



   .. py:attribute:: pbox_parameters
      :type:  list[str, Sequence[pyuncertainnumber.pba.interval.Interval]]
      :value: None



   .. py:attribute:: hedge
      :type:  str
      :value: None



   .. py:attribute:: _construct
      :type:  Type[any]
      :value: None



   .. py:attribute:: naked_value
      :type:  float
      :value: None



   .. py:attribute:: p_flag
      :type:  bool
      :value: True



   .. py:attribute:: measurand
      :type:  str
      :value: None



   .. py:attribute:: nature
      :type:  str
      :value: None



   .. py:attribute:: provenence
      :type:  str
      :value: None



   .. py:attribute:: justification
      :type:  str
      :value: None



   .. py:attribute:: structure
      :type:  str
      :value: None



   .. py:attribute:: security
      :type:  str
      :value: None



   .. py:attribute:: ensemble
      :type:  Type[pyuncertainnumber.characterisation.ensemble.Ensemble]
      :value: None



   .. py:attribute:: variability
      :type:  str
      :value: None



   .. py:attribute:: dependence
      :type:  str
      :value: None



   .. py:attribute:: uncertainty
      :type:  str
      :value: None



   .. py:attribute:: instances
      :value: []



   .. py:attribute:: _samples
      :type:  pyuncertainnumber.characterisation.utils.np.ndarray | list
      :value: None



   .. py:method:: parameterised_pbox_specification()


   .. py:method:: __post_init__()

      the de facto initialisation method for the core math objects of the UN class

      caveat:
          user needs to by themselves figure out the correct
          shape of the 'distribution_parameters', such as ['uniform', [1,2]]



   .. py:method:: match_pbox(keyword, parameters)
      :staticmethod:


      match the distribution keyword from the initialisation to create the underlying distribution object

      :param - keyword: (str) the distribution keyword
      :param - parameters: (list) the parameters of the distribution



   .. py:method:: init_check()

      check if the UN initialisation specification is correct

      .. note::

         a lot of things to double check. keep an growing list:
         1. unit
         2. hedge: user cannot speficy both 'hedge' and 'bounds'. 'bounds' takes precedence.



   .. py:method:: __str__()

      the verbose user-friendly string representation
      .. note::

         this has nothing to do with the logic of JSON serialisation
         ergo, do whatever you fancy;



   .. py:method:: __repr__() -> str

      concise __repr__



   .. py:method:: describe(type='verbose')

      print out a verbose description of the uncertain number



   .. py:method:: _get_concise_representation()

      get a concise representation of the UN object



   .. py:method:: ci()

      get 95% range confidence interval



   .. py:method:: display(**kwargs)

      quick plot of the uncertain number object



   .. py:property:: construct


   .. py:method:: from_hedge(hedged_language)
      :classmethod:


      create an Uncertain Number from hedged language

      .. note::

         # if interval or pbox, to be implemented later on
         #  currently only Interval is supported



   .. py:method:: fromConstruct(construct)
      :classmethod:


      create an Uncertain Number from a construct object



   .. py:method:: fromDistribution(D, **kwargs)
      :classmethod:


      create an Uncertain Number from specification of distribution

      :param - D: Distribution object
      :param dist_family: the distribution family
      :type dist_family: str
      :param dist_params: the distribution parameters
      :type dist_params: list, tuple or string



   .. py:method:: from_Interval(u)
      :classmethod:



   .. py:method:: from_pbox(p)
      :classmethod:


      genenal from  pbox



   .. py:method:: from_ds(ds)
      :classmethod:



   .. py:method:: from_sps(sps_dist)
      :classmethod:


      create an UN object from a parametric scipy.stats dist object
      #! it seems that a function will suffice
      :param - sps_dist: scipy.stats dist object

      .. note:: - sps_dist --> UN.Distribution object



   .. py:method:: sqrt()


   .. py:method:: __add__(other)

      add two uncertain numbers



   .. py:method:: __radd__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __mul__(other)

      multiply two uncertain numbers



   .. py:method:: __rmul__(other)


   .. py:method:: __truediv__(other)

      divide two uncertain numbers



   .. py:method:: __rtruediv__(other)


   .. py:method:: __pow__(other)

      power of two uncertain numbers



   .. py:method:: _toIntervalBackend(vars=None) -> pyuncertainnumber.characterisation.utils.np.array
      :classmethod:


      transform any UN object to an `interval`
      #! currently in use
      # TODO think if use Marco's Interval Vector object

      question:
          - what is the `interval` representation: list, nd.array or Interval object?

      :returns:

                - 2D np.array representation for all the interval-typed UNs



   .. py:method:: _IntervaltoCompBackend(vars)
      :classmethod:


      convert the interval-tupe UNs instantiated to the computational backend

      .. note::

         - it will automatically convert all the UN objects in array-like to the computational backend
         - essentially vars shall be all interval-typed UNs by now

      :returns:

                - nd.array or Marco's Interval object

      thoughts:
          - if Marco's, then we'd use `intervalise` func to get all interval objects
          and then to create another func to convert the interval objects to np.array to do endpoints method



   .. py:method:: JSON_dump(filename='UN_data.json')

      the JSON serialisation of the UN object into the filesystem



   .. py:method:: random(size=None)

      Generate random samples from the distribution.



   .. py:method:: ppf(q=None)

      "Calculate the percent point function (inverse of CDF) at quantile q.



.. py:function:: makeUNPbox(func)

.. py:function:: I(i: str | list[float | int]) -> UncertainNumber

   a shortcut for the interval-type UN object


.. py:function:: norm(*args)

.. py:function:: expon(*args)

.. py:function:: gamma(*args)

.. py:function:: _parse_interverl_inputs(vars)

   Parse the input intervals

   .. note:: - Ioanna's funcs typically take 2D NumPy arra


