pyuncertainnumber.pba.intervals.number
======================================

.. py:module:: pyuncertainnumber.pba.intervals.number

.. autoapi-nested-parse::

   :#######################################################
   : Intervals Library v02 for Python
   : Developed by Marco de Angelis
   :#######################################################

   Place the folder `intervals` that contains this file in your working directory.
   Then place the following line at the top of your code.

   `import intervals as ia`

   Once the library has been imported you can create an interval

   `a = ia.Interval(1,5)`
   `b = ia.Interval(-2,-1)

   and perform mathematical operations between them

   `a + b`
   `a - b`
   `a * b`
   `a / b`


   ----------------------------------------------------
   :Created Tue Feb 08 2022
   :github.com/marcodeangelis
   :MIT License
   ----------------------------------------------------



Attributes
----------

.. autoapisummary::

   pyuncertainnumber.pba.intervals.number.MACHINE_EPS
   pyuncertainnumber.pba.intervals.number.NUMERIC_TYPES
   pyuncertainnumber.pba.intervals.number.INTEGERS


Classes
-------

.. autoapisummary::

   pyuncertainnumber.pba.intervals.number.Interval


Functions
---------

.. autoapisummary::

   pyuncertainnumber.pba.intervals.number.show
   pyuncertainnumber.pba.intervals.number.is_Interval
   pyuncertainnumber.pba.intervals.number.lo
   pyuncertainnumber.pba.intervals.number.hi


Module Contents
---------------

.. py:data:: MACHINE_EPS
   :value: 2.220446049250313e-16


.. py:data:: NUMERIC_TYPES

.. py:data:: INTEGERS

.. py:function:: show(x: Interval) -> str

.. py:class:: Interval(lo: Union[float, numpy.ndarray], hi: Optional[Union[float, numpy.ndarray]] = None)

   --------------------------
   Created Feb 2022
   github.com/marcodeangelis
   MIT License
   --------------------------

   Interval is the main class.



   .. py:method:: __repr__()


   .. py:method:: __str__()


   .. py:attribute:: __lo


   .. py:attribute:: __hi


   .. py:attribute:: __shape


   .. py:method:: __len__()


   .. py:method:: __iter__()


   .. py:method:: __next__()


   .. py:method:: __getitem__(i: Union[int, slice])


   .. py:property:: lo
      :type: Union[numpy.ndarray, float]



   .. py:property:: hi
      :type: Union[numpy.ndarray, float]



   .. py:property:: unsized


   .. py:property:: val


   .. py:property:: scalar


   .. py:property:: shape


   .. py:method:: __neg__()


   .. py:method:: __pos__()


   .. py:method:: __add__(other)


   .. py:method:: __radd__(left)


   .. py:method:: __sub__(other)


   .. py:method:: __rsub__(left)


   .. py:method:: __mul__(other)


   .. py:method:: __rmul__(left)


   .. py:method:: __truediv__(other)


   .. py:method:: __rtruediv__(left)


   .. py:method:: __pow__(other)


   .. py:method:: __lt__(other)


   .. py:method:: __rlt__(left)


   .. py:method:: __gt__(other)


   .. py:method:: __rgt__(left)


   .. py:method:: __le__(other)


   .. py:method:: __rle__(left)


   .. py:method:: __ge__(other)


   .. py:method:: __rge__(left)


   .. py:method:: __eq__(other)


   .. py:method:: __ne__(other)


.. py:function:: is_Interval(x: Any) -> bool

.. py:function:: lo(x: Interval) -> Union[float, numpy.ndarray]

   Return the left endpoint of an Interval object.

   If x is not of class Interval, input is returned.



.. py:function:: hi(x: Interval) -> Union[float, numpy.ndarray]

   Return the right endpoint of an Interval object.

   If x is not of class Interval, input is returned.



