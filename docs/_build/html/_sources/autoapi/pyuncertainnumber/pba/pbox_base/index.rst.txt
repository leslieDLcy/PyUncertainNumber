pyuncertainnumber.pba.pbox_base
===============================

.. py:module:: pyuncertainnumber.pba.pbox_base


Exceptions
----------

.. autoapisummary::

   pyuncertainnumber.pba.pbox_base.NotIncreasingError


Classes
-------

.. autoapisummary::

   pyuncertainnumber.pba.pbox_base.Pbox


Functions
---------

.. autoapisummary::

   pyuncertainnumber.pba.pbox_base.truncate


Module Contents
---------------

.. py:exception:: NotIncreasingError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: Pbox(left=None, right=None, steps=None, shape=None, mean_left=None, mean_right=None, var_left=None, var_right=None, interpolation='linear')

   A probability distribution is a mathematical function that gives the probabilities of occurrence for diï¬€erent possible values of a variable. Probability boxes (p-boxes) represent interval bounds on probability distributions. The left and right quantiles are each stored as a NumPy array containing the percent point function (the inverse of the cumulative distribution function) for `steps` evenly spaced values between 0 and 1. P-boxes can be defined using all the probability distributions that are available through SciPy's statistics library. Naturally, precis probability distributions can be defined by defining a p-box with precise inputs. This means that within probability bounds analysis probability distributions are considered a special case of a p-box with zero width. Distribution-free p-boxes can also be generated when the underlying distribution is unknown but parameters such as the mean, variance or minimum/maximum bounds are known. Such p-boxes make no assumption about the shape of the distribution and instead return bounds expressing all possible distributions that are valid given the known information. Such p-boxes can be constructed making use of Chebyshev, Markov and Cantelli inequalities from probability theory.


   .. py:attribute:: shape
      :value: None



   .. py:method:: __repr__()


   .. py:attribute:: __str__


   .. py:method:: __iter__()


   .. py:method:: __neg__()


   .. py:method:: __lt__(other)


   .. py:method:: __rlt__(other)


   .. py:method:: __le__(other)


   .. py:method:: __rle__(other)


   .. py:method:: __gt__(other)


   .. py:method:: __rgt__(other)


   .. py:method:: __ge__(other)


   .. py:method:: __rge__(other)


   .. py:method:: __and__(other)


   .. py:method:: __rand__(other)


   .. py:method:: __or__(other)


   .. py:method:: __ror__(other)


   .. py:method:: __add__(other)


   .. py:method:: __radd__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __rsub__(other)


   .. py:method:: __mul__(other)


   .. py:method:: __rmul__(other)


   .. py:method:: __pow__(other)


   .. py:method:: __rpow__(other)


   .. py:method:: __truediv__(other)


   .. py:method:: __rtruediv__(other)


   .. py:property:: range

      leslie defined range property


   .. py:property:: lo

      Returns the left-most value in the interval


   .. py:property:: hi

      Returns the right-most value in the interval


   .. py:method:: get_range()

      get the quantile range of either a pbox or a distribution



   .. py:method:: _computemoments()


   .. py:method:: _checkmoments()


   .. py:method:: cutv(x)

      get the bounds on the cumulative probability associated with any x-value



   .. py:method:: cuth(p=0.5)

      get the bounds on the quantile at any particular probability level



   .. py:method:: outer_approximate(n=100)

      outer approximation of a p-box

      .. note:: - `the_interval_list` will have length one less than that of `p_values` (i.e. 100 and 99)



   .. py:method:: _unary(*args, function=lambda x: x)

      for monotonic unary functions only



   .. py:method:: exp()


   .. py:method:: sqrt()


   .. py:method:: recip()


   .. py:method:: check_dependency(method)
      :staticmethod:



   .. py:method:: constant_shape_check()

      a helper drop in for define binary ops



   .. py:method:: steps_check(other)


   .. py:method:: add(other: Self | pyuncertainnumber.pba.interval.Interval | float | int, method='f') -> Self

      addtion of uncertain numbers with the defined dependency method



   .. py:method:: pow(other: Self | pyuncertainnumber.pba.interval.Interval | float | int, method='f') -> Self

      Raises a p-box to the power of other using the defined dependency method



   .. py:method:: sub(other, method='f')


   .. py:method:: mul(other, method='f')

      Multiplication of uncertain numbers with the defined dependency method



   .. py:method:: div(other, method='f')


   .. py:method:: lt(other, method='f')


   .. py:method:: le(other, method='f')


   .. py:method:: gt(other, method='f')


   .. py:method:: ge(other, method='f')


   .. py:method:: min(other, method='f')

      Returns a new Pbox object that represents the element-wise minimum of two Pboxes.

      :param - other: Another Pbox object or a numeric value.
      :param - method: Calculation method to determine the minimum. Can be one of 'f', 'p', 'o', 'i'.

      :returns: Pbox



   .. py:method:: max(other, method='f')


   .. py:method:: truncate(a, b, method='f')

      Equivalent to self.min(a,method).max(b,method)



   .. py:method:: env(other)

      .. _interval.env:

      Computes the envelope of two Pboxes.

      Parameters:
      - other: Pbox or numeric value
          The other Pbox or numeric value to compute the envelope with.

      Returns:
      - Pbox
          The envelope Pbox.

      Raises:
      - ArithmeticError: If both Pboxes have different number of steps.



   .. py:method:: imp(other)

      Returns the imposition of self with other pbox

      .. note:: - binary imposition between two pboxes only



   .. py:method:: logicaland(other, method='f')


   .. py:method:: logicalor(other, method='f')


   .. py:method:: get_interval(*args) -> pyuncertainnumber.pba.interval.Interval


   .. py:method:: get_probability(val) -> pyuncertainnumber.pba.interval.Interval


   .. py:method:: summary() -> str


   .. py:method:: mean() -> pyuncertainnumber.pba.interval.Interval

      Returns the mean of the pbox



   .. py:method:: median() -> pyuncertainnumber.pba.interval.Interval

      Returns the median of the distribution



   .. py:method:: support() -> pyuncertainnumber.pba.interval.Interval


   .. py:method:: get_x()

      returns the x values for plotting



   .. py:method:: get_y()

      returns the y values for plotting



   .. py:method:: straddles(N, endpoints=True) -> bool

      :param N: Number to check
      :type N: numeric
      :param endpoints: Whether to include the endpoints within the check
      :type endpoints: bool

      :returns: * *True* -- If :math:`\mathrm{left} \leq N \leq \mathrm{right}` (Assuming `endpoints=True`)
                * *False* -- Otherwise



   .. py:method:: straddles_zero(endpoints=True) -> bool

      Checks whether :math:`0` is within the p-box



   .. py:method:: show(figax=None, now=True, title='', x_axis_label='x', **kwargs)

      legacy plotting function



   .. py:method:: display(title='', ax=None, style='band', fill_color='lightgray', bound_colors=None, **kwargs)

      default plotting function



   .. py:method:: to_ds_old(discretisation=Params.steps)

      convert to ds object

      .. note:: - without outer approximation



   .. py:method:: to_ds(discretisation=Params.steps)

      convert to ds object



.. py:function:: truncate(pbox, min, max)

