pyuncertainnumber.pba.utils
===========================

.. py:module:: pyuncertainnumber.pba.utils


Exceptions
----------

.. autoapisummary::

   pyuncertainnumber.pba.utils.NotIncreasingError


Classes
-------

.. autoapisummary::

   pyuncertainnumber.pba.utils.cdf_bundle
   pyuncertainnumber.pba.utils.CDF_bundle


Functions
---------

.. autoapisummary::

   pyuncertainnumber.pba.utils.transform_ecdf_bundle
   pyuncertainnumber.pba.utils.pl_ecdf_bounding_bundles
   pyuncertainnumber.pba.utils.sorting
   pyuncertainnumber.pba.utils.weighted_ecdf
   pyuncertainnumber.pba.utils.reweighting
   pyuncertainnumber.pba.utils.round
   pyuncertainnumber.pba.utils.uniform_reparameterisation
   pyuncertainnumber.pba.utils.find_nearest
   pyuncertainnumber.pba.utils.plot_intervals
   pyuncertainnumber.pba.utils._interval_list_to_array
   pyuncertainnumber.pba.utils.read_json
   pyuncertainnumber.pba.utils.check_increasing


Module Contents
---------------

.. py:class:: cdf_bundle

   Bases: :py:obj:`tuple`


   .. py:attribute:: quantiles


   .. py:attribute:: probabilities


.. py:class:: CDF_bundle

   .. py:attribute:: quantiles
      :type:  numpy.ndarray


   .. py:attribute:: probabilities
      :type:  numpy.ndarray


   .. py:method:: from_sps_ecdf(e)
      :classmethod:


      utility to tranform sps.ecdf to cdf_bundle



.. py:function:: transform_ecdf_bundle(e)

   utility to tranform sps.ecdf to cdf_bundle


.. py:function:: pl_ecdf_bounding_bundles(b_l: CDF_bundle, b_r: CDF_bundle, alpha=0.025, ax=None, legend=True, title=None)

.. py:function:: sorting(list1, list2)

.. py:function:: weighted_ecdf(s, w=None, display=False)

   compute the weighted ecdf from (precise) sample data

   .. note:: - Sudret eq.1


.. py:function:: reweighting(*masses)

   reweight the masses to sum to 1


.. py:function:: round()

.. py:function:: uniform_reparameterisation(a, b)

   reparameterise the uniform distribution to a, b


.. py:function:: find_nearest(array, value)

   find the index of the nearest value in the array to the given value


.. py:function:: plot_intervals(vec_interval: list[pyuncertainnumber.pba.interval.Interval | pyuncertainnumber.pba.intervals.Interval], ax=None, **kwargs)

   plot the intervals in a vectorised form
   :param vec_interval: vectorised interval objects


.. py:function:: _interval_list_to_array(l, left=True)

.. py:function:: read_json(file_name)

.. py:function:: check_increasing(arr)

.. py:exception:: NotIncreasingError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


