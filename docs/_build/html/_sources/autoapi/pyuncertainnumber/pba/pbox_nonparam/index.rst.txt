pyuncertainnumber.pba.pbox_nonparam
===================================

.. py:module:: pyuncertainnumber.pba.pbox_nonparam


Functions
---------

.. autoapisummary::

   pyuncertainnumber.pba.pbox_nonparam.KS_bounds
   pyuncertainnumber.pba.pbox_nonparam.known_constraints
   pyuncertainnumber.pba.pbox_nonparam.min_max
   pyuncertainnumber.pba.pbox_nonparam.min_max_mean
   pyuncertainnumber.pba.pbox_nonparam.min_mean
   pyuncertainnumber.pba.pbox_nonparam.mean_std
   pyuncertainnumber.pba.pbox_nonparam.mean_var
   pyuncertainnumber.pba.pbox_nonparam.pos_mean_std
   pyuncertainnumber.pba.pbox_nonparam.min_max_mode
   pyuncertainnumber.pba.pbox_nonparam.min_max_median
   pyuncertainnumber.pba.pbox_nonparam.min_max_median_is_mode
   pyuncertainnumber.pba.pbox_nonparam.symmetric_mean_std
   pyuncertainnumber.pba.pbox_nonparam.min_max_mean_std
   pyuncertainnumber.pba.pbox_nonparam.min_max_mean_var
   pyuncertainnumber.pba.pbox_nonparam.from_percentiles


Module Contents
---------------

.. py:function:: KS_bounds(s, alpha: float, display=True) -> Tuple[pyuncertainnumber.pba.utils.CDF_bundle, pyuncertainnumber.pba.utils.CDF_bundle]

   construct free pbox from sample data by Kolmogorov-Smirnoff confidence bounds

   :param - s: sample data, precise and imprecise
   :type - s: array-like
   :param - dn: KS critical value at significance level lpha and sample size N;
   :type - dn: scalar


.. py:function:: known_constraints(minimum: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, maximum: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, mean: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, median: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, mode: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, std: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, var: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, cv: Optional[Union[pyuncertainnumber.pba.interval.Interval, float, int]] = None, percentiles: Optional[dict[Union[pyuncertainnumber.pba.interval.Interval, float, int]]] = None, debug: bool = False, steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution free p-box based upon the information given.
   This function works by calculating every possible non-parametric p-box that can be generated using the information provided.
   The returned p-box is the intersection of these p-boxes.

   **Parameters**:

       ``minimum``: Minimum value of the variable
       ``maximum``: Maximum value of the variable
       ``mean``: Mean value of the variable
       ``median``: Median value of the variable
       ``mode``: Mode value of the variable
       ``std``: Standard deviation of the variable
       ``var``: Variance of the variable
       ``cv``: Coefficient of variation of the variable
       ``percentiles``: Dictionary of percentiles and their values (e.g. {0.1: 1, 0.5: 2, 0.9: nInterval(3,4)})
       ``steps``: Number of steps to use in the p-box

   .. error::

       ``ValueError``: If any of the arguments are not consistent with each other. (i.e. if ``std`` and ``var`` are both given, but ``std != sqrt(var)``)

   **Returns**:

       ``Pbox``: Imposition of possible p-boxes


.. py:function:: min_max(a: Union[pyuncertainnumber.pba.interval.Interval, float, int], b: Union[pyuncertainnumber.pba.interval.Interval, float, int] = None, steps=Params.steps, shape='box') -> pyuncertainnumber.pba.pbox_base.Pbox

   Returns a box shaped Pbox. This is equivalent to an nInterval expressed as a Pbox.

   **Parameters**:

       ``a`` : Left side of box
       ``b``: Right side of box


   **Returns**:

       ``Pbox``



.. py:function:: min_max_mean(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum and mean of the variable

   **Parameters**:

       ``minimum`` : minimum value of the variable

       ``maximum`` : maximum value of the variable

       ``mean`` : mean value of the variable


   **Returns**:

       ``Pbox``


.. py:function:: min_mean(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps=Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum and mean of the variable

   **Parameters**:

       ``minimum`` : minimum value of the variable

       ``mean`` : mean value of the variable


   **Returns**:

       ``Pbox``


.. py:function:: mean_std(mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], std: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps=Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the mean and standard deviation of the variable

   **Parameters**:

       ``mean`` : mean of the variable

       ``std`` : standard deviation of the variable


   **Returns**:

       ``Pbox``



.. py:function:: mean_var(mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], var: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps=Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the mean and variance of the variable

   Equivalent to `mean_std(mean,np.sqrt(var))`

   **Parameters**:

       ``mean`` : mean of the variable

       ``var`` : variance of the variable


   **Returns**:

       ``Pbox``



.. py:function:: pos_mean_std(mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], std: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps=Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a positive distribution-free p-box based upon the mean and standard deviation of the variable

   **Parameters**:

       ``mean`` : mean of the variable

       ``std`` : standard deviation of the variable


   **Returns**:

       ``Pbox``



.. py:function:: min_max_mode(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], mode: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum, and mode of the variable

   **Parameters**:

       ``minimum`` : minimum value of the variable

       ``maximum`` : maximum value of the variable

       ``mode`` : mode value of the variable


   **Returns**:

       ``Pbox``



.. py:function:: min_max_median(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], median: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum and median of the variable

   **Parameters**:

       ``minimum`` : minimum value of the variable

       ``maximum`` : maximum value of the variable

       ``median`` : median value of the variable


   **Returns**:

       ``Pbox``



.. py:function:: min_max_median_is_mode(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], m: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum and median/mode of the variable when median = mode.

   **Parameters**:

       ``minimum`` : minimum value of the variable

       ``maximum`` : maximum value of the variable

       ``m`` : m = median = mode value of the variable


   **Returns**:

       ``Pbox``



.. py:function:: symmetric_mean_std(mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], std: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a symmetrix distribution-free p-box based upon the mean and standard deviation of the variable

   **Parameters**:

   ``mean`` :  mean value of the variable
   ``std`` : standard deviation of the variable

   **Returns**

       ``Pbox``



.. py:function:: min_max_mean_std(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], std: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum, mean and standard deviation of the variable

   **Parameters**

       ``minimum`` : minimum value of the variable
       ``maximum`` : maximum value of the variable
       ``mean`` : mean value of the variable
       ``std`` :standard deviation of the variable

   **Returns**

       ``Pbox``

   .. seealso::

       :func:`min_max_mean_var`



.. py:function:: min_max_mean_var(minimum: Union[pyuncertainnumber.pba.interval.Interval, float, int], maximum: Union[pyuncertainnumber.pba.interval.Interval, float, int], mean: Union[pyuncertainnumber.pba.interval.Interval, float, int], var: Union[pyuncertainnumber.pba.interval.Interval, float, int], steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon the minimum, maximum, mean and standard deviation of the variable

   **Parameters**

       ``minimum`` : minimum value of the variable
       ``maximum`` : maximum value of the variable
       ``mean`` : mean value of the variable
       ``var`` :variance of the variable

   **Returns**

       ``Pbox``


   .. admonition:: Implementation

       Equivalent to ``min_max_mean_std(minimum,maximum,mean,np.sqrt(var))``

   .. seealso::

       :func:`min_max_mean_std`



.. py:function:: from_percentiles(percentiles: dict, steps: int = Params.steps) -> pyuncertainnumber.pba.pbox_base.Pbox

   Generates a distribution-free p-box based upon percentiles of the variable

   **Parameters**

       ``percentiles`` : dictionary of percentiles and their values (e.g. {0: 0, 0.1: 1, 0.5: 2, 0.9: nInterval(3,4), 1:5})

       ``steps`` : number of steps to use in the p-box

   .. important::

       The percentiles dictionary is of the form {percentile: value}. Where value can either be a number or an nInterval. If value is a number, the percentile is assumed to be a point percentile. If value is an nInterval, the percentile is assumed to be an interval percentile.

   .. warning::

       If no keys for 0 and 1 are given, ``-np.inf`` and ``np.inf`` are used respectively. This will result in a p-box that is not bounded and raise a warning.

       If the percentiles are not increasing, the percentiles will be intersected. This may not be desired behaviour.

   .. error::

       ``ValueError``: If any of the percentiles are not between 0 and 1.

   **Returns**

       ``Pbox``


   **Example**:

   .. code-block:: python

       pba.from_percentiles(
           {0: 0,
           0.25: 0.5,
           0.5: pba.I(1,2),
           0.75: pba.I(1.5,2.5),
           1: 3}
       ).show()

   .. image:: https://github.com/Institute-for-Risk-and-Uncertainty/pba-for-python/blob/master/docs/images/from_percentiles.png?raw=true
       :scale: 35 %
       :align: center
       :alt: Pbox generated from percentiles



