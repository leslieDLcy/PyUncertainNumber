endpoints
=========

.. py:module:: endpoints


Functions
---------

.. autoapisummary::

   endpoints.endpoints_method


Module Contents
---------------

.. py:function:: endpoints_method(x: numpy.ndarray, f: Callable, results: pyuncertainnumber.propagation.utils.Propagation_results = None, save_raw_data='no') -> pyuncertainnumber.propagation.utils.Propagation_results

       Performs uncertainty propagation using the Endpoints Method. The function assumes that the intervals in `x` represent uncertainties
       and aims to provide conservative bounds on the output uncertainty. If the `f` function returns multiple outputs, the `bounds` array will be 2-dimensional.

   :param - x: A 2D NumPy array where each row represents an input variable and
               the two columns define its lower and upper bounds (interval).
   :param - f: A callable function that takes a 1D NumPy array of input values and
               returns the corresponding output(s).
   :param - save_raw_data: Controls the amount of data returned.
                           - 'no': Returns only the minimum and maximum output values along with the
                                   corresponding input values.
                           - 'yes': Returns the above, plus the full arrays of unique input combinations
                                   (`all_input`) and their corresponding output values (`all_output`).

   signature:
       endpoints_method(x:np.ndarray, f:Callable, save_raw_data = 'no') -> dict

   .. note::

      # Example usage with different parameters for minimization and maximization
      f = lambda x: x[0] + x[1] + x[2]  # Example function
      
      # Determine input parameters for function and method
      x_bounds = np.array([[1, 2], [3, 4], [5, 6]])

   :returns:

             A dictionary containing the results:
               - 'bounds': An np.ndarray of the bounds for each output parameter (if f is not None).
               - 'min': A dictionary for lower bound results (if f is not None):
                 - 'x': Input values that produced the minimum output value(s).
                 - 'f': Minimum output value(s).
               - 'max': A dictionary for upper bound results (if f is not None):
                 - 'x': Input values that produced the maximum output value(s).
                 - 'f': Maximum output value(s).
               - 'raw_data': A dictionary containing raw data (if `save_raw_data` is 'yes'):
                 - 'x': All generated input samples.
                 - 'f': Corresponding output values for each input sample.
   :rtype: - dict

   .. rubric:: Example

   >>> y = endpoints_method(x_bounds, f)


